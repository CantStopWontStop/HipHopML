---
title: "Text Mining"
format: 
    html: 
        toc: true
        toc-title: 'Steps'
execute:
  echo: true
  warning: false
  cache: true
---

```{r}
library(tidyverse)
library(tidytext)
library(ggwordcloud)
source('../functions.R')
```

```{r}

words_df <- read_csv('../data/lyr_df.csv') |>
  mutate(song_art = glue::glue('{song} - {artist}')) |>
  unnest_tokens(word, lyrics)

words_df
```

```{r}
songs_by_words <- words_df |> 
    group_by(song_art, genre) |> 
    summarise(num_of_words = n()) |>
    ungroup() |> 
    arrange(desc(num_of_words)) 


songs_by_words |>
    # head(20) |> 
    # mutate(
    #     song_art = fct_reorder(song_art,tot_wrds)
    #     ) |> 
    ggplot(aes(num_of_words, fill = genre)) +
    geom_histogram()  +
    xlab('Number of Words') +
    ylab('Number of Songs') +
    theme_ben()    +
  scale_fill_manual(values = clrs)
```

```{r}
songs_by_words   |> 
    head(20) |> 
    mutate(
        song_art = fct_reorder(song_art,num_of_words)
        ) |> 
    ggplot(aes(y = song_art, 
               x = num_of_words,
               fill = genre)
           ) +
    geom_col() +
  scale_fill_manual(values = clrs) +
  labs(x = 'Number of Words',
       y = NULL)+
    theme_ben() +
  theme(legend.position = 'none')
```

```{r}
data("stop_words")
 
    
words_trimmed_df <- words_df |> 
    anti_join(stop_words)

words_trimmed_df
```

```{r}

songs_by_words_trimmed <- words_trimmed_df |> 
    group_by(song_art, genre) |> 
    summarise(num_of_words = n()) |>
    ungroup() |> 
    arrange(desc(num_of_words)) 

songs_by_words_trimmed |>
    # head(20) |> 
    # mutate(
    #     song_art = fct_reorder(song_art,tot_wrds)
    #     ) |> 
    ggplot(aes(num_of_words, fill = genre)) +
    geom_histogram( )  +
    xlab('Number of Unique Words') +
    ylab('Number of Songs') +
    theme_ben()    +
  scale_fill_manual(values = clrs)
```

```{r}
songs_by_words_trimmed   |> 
    head(20) |> 
    mutate(
        song_art = fct_reorder(song_art,num_of_words)
        ) |> 
    ggplot(aes(y = song_art, 
               x = num_of_words,
               fill = genre)
           ) +
    geom_col() +
  scale_fill_manual(values = clrs) +
    xlab('Number of Unique Words') +
    theme_ben() +
    theme( axis.title.y = element_blank(),
           legend.position = 'none')
```

```{r}

top_words_by_song <- words_trimmed_df |> 
    group_by(genre, song_art) |> 
    count(word) |> slice_max(n, n = 1)

top_words_by_song
```

```{r include=FALSE}

top_words_by_song |> 
    arrange(desc(n)) |> 
    head(100) |> 
    ggplot(aes(label = word, size = n, color = genre)) +
        geom_text_wordcloud(shape = 'square') +
    scale_color_manual(values = c("#ffffff","#00bc8c")) +
    scale_size_area(max_size = 10) +
    theme(legend.position = 'Top')
```

```{r}


# plot_by_year <- function(year){
#     words_by_year_df |> 
#         group_by(rel_year) |> 
#         slice_max(n, n = 100) |> 
#         filter(rel_year == year) |> 
#         ggplot(aes(label = word, size = n)) +
#             geom_text_wordcloud(color = "#145389") +
#             scale_size_area(max_size = 14) +
#             facet_wrap(~rel_year,scales = "free" ) +
#             theme_ben()
#     
# }
# 
# plot_by_year
# 
# 
# years <- words_by_year_df$rel_year |> unique()
# 
# lapply(years, plot_by_year)
```

```{r }
#| column: screen-inset
#| layout: [[2,48,2,48]]


```

```{r eval=FALSE}
top_words_by_genre <- words_trimmed_df |> 
    drop_na(hip_hop_rnb) |> 
    group_by(hip_hop_rnb) |> 
    count(word) |> slice_max(n, n = 100)

top_words_by_genre |> 
        ggplot(aes(label = word, size = n)) +
            geom_text_wordcloud(color = "#145389") +
            scale_size_area(max_size = 14) +
            facet_wrap(~hip_hop_rnb,scales = "free" ) +
            theme_ben()
```
