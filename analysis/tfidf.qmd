---
title: "TF-IDF Analysis"
format: 
    html: 
        toc: true
        toc-title: 'Steps'
        theme: 'flatly'
execute:
  echo: true
  warning: false
---

```{r}
library(tidyverse)
library(tidytext)
library(hrbrthemes)
```

```{r}
lyr_df <- read_csv('../data/lyr_df.csv') |> 
    mutate(genre = if_else(hip_hop_rnb == 0, 
                           'Rock / Country', 
                           'RnB / Hip Hop'))
lyr_df
```

```{r}

song_words <- lyr_df |> 
    drop_na(hip_hop_rnb) |> 
    unnest_tokens(word, lyrics)|>
    add_count(song, artist, name = "total_words") |> 
    anti_join(stop_words) |> 
    group_by(song, artist, hip_hop_rnb, genre, total_words) |> 
    count(word, sort = TRUE) |> 
    ungroup()

song_words
```

```{r}
    
song_words_tf_idf <- song_words |> 
    select(-total_words) |>
    mutate(song_artist = glue::glue('{song} - {artist}')) |> 
    bind_tf_idf(term = word, document = song_artist, n = n)
    

song_words_tf_idf |> write_csv('../data/song_words_tf_idf.csv')

song_words_tf_idf |> 
    arrange(desc(tf_idf)) 
```

```{r}
song_words_tf_idf |> 
    arrange(desc(tf_idf)) |> 
    head(25) |> 
    ggplot(aes(x = tf_idf,
               y = reorder(song_artist, tf_idf), 
               label = word, 
               fill = genre)) +
    geom_col() +
    geom_label()  +
    theme_minimal()+
    ylab('Song - Artist') +
    xlab('TF-IDF Score')+
  theme_ipsum_ps()
```

```{r}

genre_words <- lyr_df |> 
    drop_na(hip_hop_rnb) |> 
    unnest_tokens(word, lyrics)|>
    add_count(hip_hop_rnb, name = "total_words") |> 
    # anti_join(stop_words) |> 
    group_by(hip_hop_rnb, total_words) |> 
    count(word, sort = TRUE) |> 
    ungroup()

genre_words
```

```{r}


genre_words_tf_idf <- genre_words |> 
    select(-total_words) |> 
    mutate(genre = if_else(hip_hop_rnb == 0, 
                           'Rock / Country', 
                           'RnB / Hip Hop')) |>
    bind_tf_idf(term = word, document = genre, n = n) 

genre_words_tf_idf |> write_csv('../data/genre_words_tf_idf.csv')

cen_genre_words_tf_idf <- genre_words_tf_idf |> 
    mutate(word = word |> str_replace('nigga', 'n****'))

genre_words_tf_idf |> 
    arrange(desc(tf_idf)) 
```

```{r}

cen_genre_words_tf_idf |> 
    arrange(desc(tf_idf))|> 
    group_by(genre) |> 
    slice_max(tf_idf, n = 20) |> 
    ungroup() |> 
    ggplot(aes(x = tf_idf, 
               y = reorder(word, tf_idf), 
               label = n, 
               fill = genre)) +
    geom_col() +
    geom_label()  +
    scale_fill_discrete() +
    facet_wrap(~genre, scales = 'free')+
    ylab('Song - Artist') +
    xlab('TF-IDF Score')+
    theme_ipsum_ps() +
    theme(legend.position = 'none')
```
